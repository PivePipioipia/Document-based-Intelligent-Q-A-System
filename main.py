import logging
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnablePassthrough
from langchain_core.output_parsers import StrOutputParser
from langchain.retrievers.multi_query import MultiQueryRetriever
from legal_agent import SimpleLegalAgent  

from config import DATABASE_PATH, COLLECTION_NAME, EMBEDDING_MODEL_NAME, GROQ_API_KEY, LLM_MODEL_NAME
from vector_store_loader import VectorStoreLoader
from llm_connector import LLMConnector

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s', force=True)
logger = logging.getLogger(__name__)

def format_docs(docs):
    """H√†m h·ªó tr·ª£ ƒë·ªÉ ƒë·ªãnh d·∫°ng c√°c t√†i li·ªáu truy xu·∫•t th√†nh m·ªôt chu·ªói duy nh·∫•t."""
    return "\n\n".join(doc.page_content for doc in docs)

PROMPT_TEMPLATE = """
B·∫°n l√† m·ªôt tr·ª£ l√Ω AI ph√°p l√Ω, chuy√™n tr·∫£ l·ªùi c√°c c√¢u h·ªèi d·ª±a tr√™n n·ªôi dung c·ªßa vƒÉn b·∫£n Lu·∫≠t ƒë∆∞·ª£c cung c·∫•p.
Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch ch√≠nh x√°c v√† ch·ªâ d·ª±a v√†o th√¥ng tin c√≥ trong ph·∫ßn "NG·ªÆ C·∫¢NH" d∆∞·ªõi ƒë√¢y.

**NG·ªÆ C·∫¢NH:**
{context}

**D·ª∞A V√ÄO NG·ªÆ C·∫¢NH TR√äN, H√ÉY TR·∫¢ L·ªúI C√ÇU H·ªéI SAU:**
**C√¢u h·ªèi:** {question}

**QUY T·∫ÆC TR·∫¢ L·ªúI:**
- Tr·∫£ l·ªùi th·∫≥ng v√†o v·∫•n ƒë·ªÅ, kh√¥ng th√™m l·ªùi ch√†o hay c√°c c√¢u n√≥i kh√¥ng li√™n quan.
- N·∫øu c√¢u tr·∫£ l·ªùi c√≥ trong ng·ªØ c·∫£nh, h√£y tr√≠ch d·∫´n l·∫°i th√¥ng tin m·ªôt c√°ch ng·∫Øn g·ªçn.
- **N·∫øu c√¢u tr·∫£ l·ªùi kh√¥ng th·ªÉ ƒë∆∞·ª£c t√¨m th·∫•y trong ng·ªØ c·∫£nh, h√£y tr·∫£ l·ªùi ch√≠nh x√°c l√†: "T√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ƒëi·ªÅu n√†y trong t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p."**
- Kh√¥ng ƒë∆∞·ª£c suy di·ªÖn, ph·ªèng ƒëo√°n hay s·ª≠ d·ª•ng ki·∫øn th·ª©c b√™n ngo√†i ng·ªØ c·∫£nh.
- Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
"""
prompt = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)

if __name__ == "__main__":
    print("ü§ñ" + "=" * 60)
    print(" ¬† ¬† ¬† ¬†TR·ª¢ L√ù AI PH√ÅP L√ù TH√îNG MINH - H·ªÜ TH·ªêNG RAG")
    print("=" * 65)
    logger.info("B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o h·ªá th·ªëng RAG...")

    # --- B∆∞·ªõc 2: T·∫£i l·∫°i Kho Tri Th·ª©c v√† Kh·ªüi t·∫°o M√¥ H√¨nh ---
    logger.info("T·∫£i l·∫°i kho tri th·ª©c v√† kh·ªüi t·∫°o m√¥ h√¨nh...")

    vector_store_loader = VectorStoreLoader(
        db_directory=DATABASE_PATH,
        collection_name=COLLECTION_NAME,
        embedding_model_name=EMBEDDING_MODEL_NAME
    )
    vectordb = vector_store_loader.load()
    if not vectordb:
        exit()

    llm_connector = LLMConnector(
        groq_api_key=GROQ_API_KEY,
        model_name=LLM_MODEL_NAME
    )
    llm = llm_connector.connect()
    if not llm:
        exit()

    print("-" * 60)
    logger.info("Ho√†n th√†nh. B·∫Øt ƒë·∫ßu x√¢y d·ª±ng RAG Chain.")

    try:
        base_retriever = vectordb.as_retriever(search_kwargs={"k": 3})
        logger.info(" ƒê√£ kh·ªüi t·∫°o Retriever c∆° b·∫£n th√†nh c√¥ng")

        logger.info(" ƒêang kh·ªüi t·∫°o Multi-Query Retriever...")
        retriever = MultiQueryRetriever.from_llm(
            retriever=base_retriever,
            llm=llm
        )
        logger.info(" ƒê√£ kh·ªüi t·∫°o Multi-Query Retriever th√†nh c√¥ng")
    except Exception as e:
        logger.error(f" L·ªói khi kh·ªüi t·∫°o Retriever: {e}")
        exit()

    try:
        rag_chain = (
                {"context": retriever | format_docs, "question": RunnablePassthrough()}
                | prompt
                | llm
                | StrOutputParser()
        )
        logger.info(" ƒê√£ l·∫Øp r√°p RAG Chain ho√†n ch·ªânh!")
    except Exception as e:
        logger.error(f" L·ªói khi l·∫Øp r√°p RAG Chain: {e}")
        exit()

    try:
        print("-" * 60)
        logger.info(" ƒêang kh·ªüi t·∫°o Simple Legal Agent...")

        legal_agent = SimpleLegalAgent(
            retriever=retriever,
            llm=llm,
            rag_chain=rag_chain
        )

        print("\n SIMPLE LEGAL AGENT ƒê√É S·∫¥N S√ÄNG!")
        print(" G√µ 'exit' ƒë·ªÉ tho√°t.")
        print(" G√µ 'history' ƒë·ªÉ xem l·ªãch s·ª≠.")
        print(" G√µ 'clear' ƒë·ªÉ x√≥a l·ªãch s·ª≠.")

        while True:
            question = input("\nB·∫°n h·ªèi g√¨?")
            if question.lower() == 'exit':
                break
            elif question.lower() == 'history':
                legal_agent.show_conversation_history()
            elif question.lower() == 'clear':
                legal_agent.clear_memory()
            elif question.strip() == "":
                print("Vui l√≤ng nh·∫≠p c√¢u h·ªèi.")
            else:
                legal_agent.ask(question)

    except Exception as e:
        logger.error(f" L·ªói khi kh·ªüi t·∫°o v√† ch·∫°y Agent: {e}")
        print(f" H·ªá th·ªëng ƒë√£ g·∫∑p l·ªói: {e}")
