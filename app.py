# app.py
import gradio as gr
import logging
import time

# Import c√°c module ƒë√£ t·∫°o
from config import (
    DATABASE_PATH,
    COLLECTION_NAME,
    EMBEDDING_MODEL_NAME,
    GROQ_API_KEY,
    LLM_MODEL_NAME
)
from vector_store_loader import VectorStoreLoader
from llm_connector import LLMConnector
from legal_agent import SimpleLegalAgent
from langchain.retrievers.multi_query import MultiQueryRetriever
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnablePassthrough
from langchain_core.output_parsers import StrOutputParser

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


# --- 1. Kh·ªüi t·∫°o to√†n b·ªô h·ªá th·ªëng RAG v√† Agent ---
def initialize_system():
    """Kh·ªüi t·∫°o v√† tr·∫£ v·ªÅ c√°c ƒë·ªëi t∆∞·ª£ng c·∫ßn thi·∫øt cho RAG."""
    print("ü§ñ" + "=" * 60)
    print(" ¬† ¬† ¬† ¬†KH·ªûI T·∫†O H·ªÜ TH·ªêNG RAG CHO GIAO DI·ªÜN WEB")
    print("=" * 65)

    # T·∫£i l·∫°i Vector Database
    vector_store_loader = VectorStoreLoader(
        db_directory=DATABASE_PATH,
        collection_name=COLLECTION_NAME,
        embedding_model_name=EMBEDDING_MODEL_NAME
    )
    vectordb = vector_store_loader.load()
    if not vectordb:
        raise Exception("Kh√¥ng th·ªÉ t·∫£i Vector Database.")

    # Kh·ªüi t·∫°o v√† k·∫øt n·ªëi LLM
    llm_connector = LLMConnector(
        groq_api_key=GROQ_API_KEY,
        model_name=LLM_MODEL_NAME
    )
    llm = llm_connector.connect()
    if not llm:
        raise Exception("Kh√¥ng th·ªÉ k·∫øt n·ªëi LLM.")

    # --- X√¢y D·ª±ng L√µi RAG (Retriever & Chain) ---
    base_retriever = vectordb.as_retriever(search_kwargs={"k": 3})
    retriever = MultiQueryRetriever.from_llm(
        retriever=base_retriever,
        llm=llm
    )

    PROMPT_TEMPLATE = """
    B·∫°n l√† m·ªôt tr·ª£ l√Ω AI ph√°p l√Ω, chuy√™n tr·∫£ l·ªùi c√°c c√¢u h·ªèi d·ª±a tr√™n n·ªôi dung c·ªßa vƒÉn b·∫£n Lu·∫≠t ƒë∆∞·ª£c cung c·∫•p.
    Nhi·ªám v·ª• c·ªßa b·∫°n l√† tr·∫£ l·ªùi c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng m·ªôt c√°ch ch√≠nh x√°c v√† ch·ªâ d·ª±a v√†o th√¥ng tin c√≥ trong ph·∫ßn "NG·ªÆ C·∫¢NH" d∆∞·ªõi ƒë√¢y.

    **NG·ªÆ C·∫¢NH:**
    {context}

    **D·ª∞A V√ÄO NG·ªÆ C·∫¢NH TR√äN, H√ÉY TR·∫¢ L·ªúI C√ÇU H·ªéI SAU:**
    **C√¢u h·ªèi:** {question}

    **QUY T·∫ÆC TR·∫¢ L·ªúI:**
    - Tr·∫£ l·ªùi th·∫≥ng v√†o v·∫•n ƒë·ªÅ, kh√¥ng th√™m l·ªùi ch√†o hay c√°c c√¢u n√≥i kh√¥ng li√™n quan.
    - N·∫øu c√¢u tr·∫£ l·ªùi c√≥ trong ng·ªØ c·∫£nh, h√£y tr√≠ch d·∫´n l·∫°i th√¥ng tin m·ªôt c√°ch ng·∫Øn g·ªçn.
    - **N·∫øu c√¢u tr·∫£ l·ªùi kh√¥ng th·ªÉ ƒë∆∞·ª£c t√¨m th·∫•y trong ng·ªØ c·∫£nh, h√£y tr·∫£ l·ªùi ch√≠nh x√°c l√†: "T√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin v·ªÅ ƒëi·ªÅu n√†y trong t√†i li·ªáu ƒë∆∞·ª£c cung c·∫•p."**
    - Kh√¥ng ƒë∆∞·ª£c suy di·ªÖn, ph·ªèng ƒëo√°n hay s·ª≠ d·ª•ng ki·∫øn th·ª©c b√™n ngo√†i ng·ªØ c·∫£nh.
    - Lu√¥n tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.
    """
    prompt = ChatPromptTemplate.from_template(PROMPT_TEMPLATE)

    def format_docs(docs):
        return "\n\n".join(doc.page_content for doc in docs)

    rag_chain = (
            {"context": retriever | format_docs, "question": RunnablePassthrough()}
            | prompt
            | llm
            | StrOutputParser()
    )

    # Kh·ªüi t·∫°o Agent
    legal_agent = SimpleLegalAgent(
        retriever=retriever,
        llm=llm,
        rag_chain=rag_chain
    )

    logger.info("‚úÖ T·∫•t c·∫£ th√†nh ph·∫ßn ƒë√£ s·∫µn s√†ng!")
    return legal_agent


# --- Kh·ªüi t·∫°o h·ªá th·ªëng m·ªôt l·∫ßn khi app ƒë∆∞·ª£c load ---
try:
    legal_agent = initialize_system()
except Exception as e:
    legal_agent = None
    logger.error(f"‚ùå L·ªói nghi√™m tr·ªçng khi kh·ªüi t·∫°o h·ªá th·ªëng: {e}")


# --- 2. ƒê·ªãnh nghƒ©a h√†m x·ª≠ l√Ω cho Gradio ---
def chat_with_agent(question, history):
    if not legal_agent:
        return "Xin l·ªói, h·ªá th·ªëng ƒëang g·∫∑p l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau.", history

    start_time = time.time()
    try:
        # S·ª≠ d·ª•ng ph∆∞∆°ng th·ª©c ask c·ªßa Agent ƒë·ªÉ x·ª≠ l√Ω c√¢u h·ªèi
        answer = legal_agent.ask(question)
        end_time = time.time()

        # In k·∫øt qu·∫£ x·ª≠ l√Ω
        logger.info(f"Th·ªùi gian x·ª≠ l√Ω: {end_time - start_time:.2f} gi√¢y")

        # C·∫≠p nh·∫≠t l·ªãch s·ª≠ chat cho Gradio
        history.append((question, answer))
        return "", history

    except Exception as e:
        logger.error(f"L·ªói khi x·ª≠ l√Ω c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng: {e}")
        error_message = f"Xin l·ªói, c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω: {e}"
        history.append((question, error_message))
        return "", history


# --- 3. T·∫°o giao di·ªán Gradio ---
with gr.Blocks(title="Tr·ª£ L√Ω AI Ph√°p L√Ω (RAG + Agent)") as demo:
    gr.Markdown(
        """
        # ü§ñ Tr·ª£ L√Ω AI Ph√°p L√Ω
        Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi h·ªá th·ªëng h·ªèi ƒë√°p th√¥ng minh v·ªÅ Lu·∫≠t B·∫£o v·ªá d·ªØ li·ªáu c√° nh√¢n.
        H√£y nh·∫≠p c√¢u h·ªèi c·ªßa b·∫°n v√†o khung chat d∆∞·ªõi ƒë√¢y!
        """
    )

    # Hi·ªÉn th·ªã l·ªãch s·ª≠ chat
    chatbot = gr.Chatbot(height=500)

    # Khung nh·∫≠p li·ªáu
    msg = gr.Textbox(
        label="C√¢u h·ªèi c·ªßa b·∫°n:",
        placeholder="V√≠ d·ª•: D·ªØ li·ªáu c√° nh√¢n nh·∫°y c·∫£m l√† g√¨?"
    )

    # N√∫t g·ª≠i v√† n√∫t x√≥a
    with gr.Row():
        clear_btn = gr.ClearButton([msg, chatbot], value="X√≥a")
        submit_btn = gr.Button("G·ª≠i", variant="primary")

    # X·ª≠ l√Ω s·ª± ki·ªán khi ng∆∞·ªùi d√πng g·ª≠i c√¢u h·ªèi
    submit_btn.click(
        chat_with_agent,
        inputs=[msg, chatbot],
        outputs=[msg, chatbot],
        queue=False
    )

    msg.submit(
        chat_with_agent,
        inputs=[msg, chatbot],
        outputs=[msg, chatbot],
        queue=False
    )

    gr.Examples(
        examples=[
            "D·ªØ li·ªáu d√πng chung l√† g√¨?",
            "S·ª± kh√°c nhau gi·ªØa d·ªØ li·ªáu d√πng chung v√† d·ªØ li·ªáu d√πng ri√™ng?",
            "C∆° s·ªü d·ªØ li·ªáu qu·ªëc gia ƒë∆∞·ª£c l∆∞u tr·ªØ ·ªü ƒë√¢u?"
        ],
        inputs=msg
    )

if __name__ == "__main__":
    demo.launch(share=True)  # share=True ƒë·ªÉ t·∫°o link public cho Hugging Face Spaces