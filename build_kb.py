# build_kb.py
import os
import logging
from typing import List, Dict, Any
from pathlib import Path
import chromadb

# Import c√°c module ƒë√£ t·∫°o
from config import FULL_FILE_PATH, DATABASE_PATH, COLLECTION_NAME, EMBEDDING_MODEL_NAME, CHUNK_SIZE, CHUNK_OVERLAP, \
    CLEAR_EXISTING_DB
from text_processor import TextProcessor
from embedding_generator import EmbeddingGenerator
from vector_database import VectorDatabase

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


class KnowledgeBaseBuilder:
    """L·ªõp ch√≠nh ƒë·ªÉ x√¢y d·ª±ng kho tri th·ª©c"""

    def __init__(self, db_path: str, collection_name: str, embedding_model: str):
        self.text_processor = TextProcessor()
        self.embedding_generator = EmbeddingGenerator(embedding_model)
        self.vector_db = VectorDatabase(db_path, collection_name)
        logger.info("üöÄ KnowledgeBaseBuilder ƒë√£ kh·ªüi t·∫°o th√†nh c√¥ng.")

    def build_from_file(self, file_path: str, chunk_size: int, overlap: int, clear_existing: bool):
        logger.info(f"üîÑ B·∫Øt ƒë·∫ßu x√¢y d·ª±ng knowledge base t·ª´ file: {file_path}")

        # X√≥a d·ªØ li·ªáu c≈© n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
        if clear_existing:
            logger.info(f"üî• Y√™u c·∫ßu x√≥a d·ªØ li·ªáu c≈©. ƒêang t·∫°o l·∫°i collection '{self.vector_db.collection_name}'...")
            try:
                self.vector_db.client.delete_collection(name=self.vector_db.collection_name)
                self.vector_db.collection = self.vector_db.client.create_collection(name=self.vector_db.collection_name)
                logger.info(f"‚úÖ ƒê√£ t·∫°o l·∫°i collection '{self.vector_db.collection_name}' th√†nh c√¥ng.")
            except Exception as e:
                logger.error(f"‚ùå L·ªói khi t·∫°o l·∫°i collection: {e}. C√≥ th·ªÉ collection kh√¥ng t·ªìn t·∫°i.")
                # N·∫øu l·ªói, th·ª≠ l·∫°i vi·ªác get_or_create ƒë·ªÉ ƒë·∫£m b·∫£o collection t·ªìn t·∫°i
                self.vector_db.collection = self.vector_db.client.get_or_create_collection(
                    name=self.vector_db.collection_name)

        raw_text = self.text_processor.read_file(file_path)
        if not raw_text: return False

        cleaned_text = self.text_processor.clean_text(raw_text)
        if not cleaned_text: return False

        chunks = self.text_processor.split_into_chunks(cleaned_text, chunk_size, overlap)
        if not chunks: return False

        texts = [chunk['content'] for chunk in chunks]
        embeddings = self.embedding_generator.create_embeddings(texts)
        if not embeddings: return False

        success = self.vector_db.add_documents(chunks, embeddings, Path(file_path).name)
        if success:
            logger.info("üéâ X√¢y d·ª±ng knowledge base th√†nh c√¥ng!")
            self.print_summary()
            return True
        return False

    def print_summary(self):
        db_info = self.vector_db.get_database_info()
        model_info = self.embedding_generator.get_model_info()
        print("\n" + "=" * 60 + "\nüìä T·ªîNG K·∫æT KNOWLEDGE BASE\n" + "=" * 60)
        print(f"üìç ƒê∆∞·ªùng d·∫´n DB: {db_info.get('database_path', 'N/A')}")
        print(f"üìö Collection: {db_info.get('collection_name', 'N/A')}")
        print(f"üìÑ T·ªïng s·ªë documents: {db_info.get('total_documents', 0)}")
        print(f"ü§ñ Embedding model: {model_info.get('model_name', 'N/A')}")
        print(f"üìê Vector dimension: {model_info.get('vector_dimension', 'N/A')}")
        print("=" * 60 + "\n")


# --- Ph·∫ßn th·ª±c thi ch√≠nh ---
if __name__ == "__main__":
    print("üöÄ B·∫ÆT ƒê·∫¶U X√ÇY D·ª∞NG KNOWLEDGE BASE")
    print("-" * 50)

    try:
        builder = KnowledgeBaseBuilder(
            db_path=DATABASE_PATH,
            collection_name=COLLECTION_NAME,
            embedding_model=EMBEDDING_MODEL_NAME
        )
        success = builder.build_from_file(
            file_path=FULL_FILE_PATH,
            chunk_size=CHUNK_SIZE,
            overlap=CHUNK_OVERLAP,
            clear_existing=CLEAR_EXISTING_DB
        )

        if success:
            print("X√¢y d·ª±ng knowledge base th√†nh c√¥ng!")
        else:
            print("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x√¢y d·ª±ng")

    except Exception as e:
        logger.error(f"FATAL ERROR trong qu√° tr√¨nh build: {e}")