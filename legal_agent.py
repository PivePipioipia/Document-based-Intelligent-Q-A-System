import re
import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

class SimpleLegalAgent:
    """
    Phi√™n b·∫£n ƒë∆°n gi·∫£n h√≥a c·ªßa Legal Agent v·ªõi x·ª≠ l√Ω l·ªói t·ªët h∆°n
    """
    def __init__(self, retriever, llm, rag_chain):
        self.retriever = retriever
        self.llm = llm
        self.rag_chain = rag_chain
        self.conversation_history = []  

        logger.info("Simple Legal Agent ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o th√†nh c√¥ng!")

    def search_documents(self, query: str) -> str:
        """T√¨m ki·∫øm c∆° b·∫£n trong t√†i li·ªáu"""
        try:
            logger.info(f"T√¨m ki·∫øm: {query}")
            result = self.rag_chain.invoke(query)

            # Th√™m source citation
            docs = self.retriever.invoke(query)
            sources = []
            for i, doc in enumerate(docs[:2], 1):
                content = doc.page_content[:100]
                if "ƒêi·ªÅu" in content:
                    match = re.search(r'ƒêi·ªÅu \d+', content)
                    if match:
                        sources.append(match.group())

            if sources:
                result += f"\n\nNgu·ªìn: {', '.join(sources)}"

            return result
        except Exception as e:
            return f"L·ªói khi t√¨m ki·∫øm: {str(e)}"

    def analyze_question_and_respond(self, question: str) -> str:
        """Ph√¢n t√≠ch c√¢u h·ªèi v√† ƒë∆∞a ra ph·∫£n h·ªìi th√¥ng minh"""
        try:
            logger.info(f"Ph√¢n t√≠ch c√¢u h·ªèi: {question}")

            # Ph√¢n lo·∫°i lo·∫°i c√¢u h·ªèi
            question_lower = question.lower()

            if any(word in question_lower for word in ["so s√°nh", "kh√°c bi·ªát", "gi·ªëng", "kh√°c nhau"]):
                return self._handle_comparison_question(question)
            elif any(word in question_lower for word in ["ƒë·ªãnh nghƒ©a", "l√† g√¨", "c√≥ nghƒ©a", "kh√°i ni·ªám"]):
                return self._handle_definition_question(question)
            elif any(word in question_lower for word in ["vi ph·∫°m", "ph·∫°t", "h·∫≠u qu·∫£", "tr√°ch nhi·ªám"]):
                return self._handle_compliance_question(question)
            elif any(word in question_lower for word in ["ƒëi·ªÅu", "kho·∫£n", "quy ƒë·ªãnh"]):
                return self._handle_article_question(question)
            else:
                return self._handle_general_question(question)

        except Exception as e:
            logger.error(f"L·ªói khi ph√¢n t√≠ch c√¢u h·ªèi: {e}")
            return self.search_documents(question)  

    def _handle_definition_question(self, question: str) -> str:
        """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ƒë·ªãnh nghƒ©a"""
        logger.info("X·ª≠ l√Ω c√¢u h·ªèi ƒë·ªãnh nghƒ©a")
        result = self.search_documents(question)

        # T√¨m th√™m th√¥ng tin li√™n quan
        if "ƒë·ªãnh nghƒ©a" not in question.lower():
            extended_query = f"ƒë·ªãnh nghƒ©a {question}"
            additional_info = self.search_documents(extended_query)
            if "kh√¥ng t√¨m th·∫•y" not in additional_info.lower():
                result += f"\n\nüìñ TH√îNG TIN B·ªï SUNG:\n{additional_info}"

        return result

    def _handle_comparison_question(self, question: str) -> str:
        """X·ª≠ l√Ω c√¢u h·ªèi so s√°nh"""
        logger.info("X·ª≠ l√Ω c√¢u h·ªèi so s√°nh")

        # T√¨m ki·∫øm th√¥ng tin chung tr∆∞·ªõc
        result = self.search_documents(question)

        # T√¨m t·ª´ng kh√°i ni·ªám ri√™ng l·∫ª
        words = question.split()
        concepts = [word for word in words if len(word) > 3 and word not in ['gi·ªØa', 'v·ªõi', 'v√†', 'c·ªßa', 'trong']]

        additional_info = ""
        for concept in concepts[:2]:  
            concept_query = f"ƒë·ªãnh nghƒ©a {concept}"
            concept_info = self.search_documents(concept_query)
            if "kh√¥ng t√¨m th·∫•y" not in concept_info.lower():
                additional_info += f"\n\n V·ªÄ '{concept.upper()}':\n{concept_info}"

        if additional_info:
            result += additional_info

        return result

    def _handle_compliance_question(self, question: str) -> str:
        """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ tu√¢n th·ªß"""
        logger.info(" X·ª≠ l√Ω c√¢u h·ªèi tu√¢n th·ªß")

        # T√¨m quy ƒë·ªãnh
        result = self.search_documents(question)

        # T√¨m h·∫≠u qu·∫£ vi ph·∫°m
        violation_query = f"h√¨nh ph·∫°t vi ph·∫°m {question}"
        violation_info = self.search_documents(violation_query)
        if "kh√¥ng t√¨m th·∫•y" not in violation_info.lower():
            result += f"\n\n H·∫¨U QU·∫¢ VI PH·∫†M:\n{violation_info}"

        return result

    def _handle_article_question(self, question: str) -> str:
        """X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ƒëi·ªÅu kho·∫£n c·ª• th·ªÉ"""
        logger.info(" X·ª≠ l√Ω c√¢u h·ªèi v·ªÅ ƒëi·ªÅu kho·∫£n")

        result = self.search_documents(question)

        # T√¨m ƒëi·ªÅu kho·∫£n li√™n quan
        article_match = re.search(r'ƒêi·ªÅu \d+', question)
        if article_match:
            article = article_match.group()
            related_query = f"ƒëi·ªÅu kho·∫£n li√™n quan {article}"
            related_info = self.search_documents(related_query)
            if "kh√¥ng t√¨m th·∫•y" not in related_info.lower():
                result += f"\n\n ƒêI·ªÄU KHO·∫¢N LI√äN QUAN:\n{related_info}"

        return result

    def _handle_general_question(self, question: str) -> str:
        """X·ª≠ l√Ω c√¢u h·ªèi chung"""
        logger.info(" X·ª≠ l√Ω c√¢u h·ªèi chung")
        return self.search_documents(question)

    def ask(self, question: str) -> str:
        """Ph∆∞∆°ng th·ª©c ch√≠nh ƒë·ªÉ h·ªèi Agent"""
        try:
            print(f"\nAgent ƒëang x·ª≠ l√Ω c√¢u h·ªèi: '{question}'")
            print("ƒêang ph√¢n t√≠ch v√† t√¨m ki·∫øm th√¥ng tin...")
            print("-" * 60)

            
            self.conversation_history.append({"role": "user", "content": question})

            
            answer = self.analyze_question_and_respond(question)

           
            self.conversation_history.append({"role": "assistant", "content": answer})

            print("\n" + "="*60)
            print("K·∫æT QU·∫¢ T∆Ø V·∫§N PH√ÅP L√ù")
            print("="*60)
            print(answer)
            print("="*60)

            return answer

        except Exception as e:
            error_msg = f"Xin l·ªói, c√≥ l·ªói x·∫£y ra: {str(e)}. ƒêang th·ª≠ ph∆∞∆°ng th·ª©c d·ª± ph√≤ng..."
            print(f"{error_msg}")

            # Fallback: S·ª≠ d·ª•ng RAG chain tr·ª±c ti·∫øp
            try:
                fallback_answer = self.search_documents(question)
                print(f"\nK·∫øt qu·∫£ d·ª± ph√≤ng:\n{fallback_answer}")
                return fallback_answer
            except Exception as fallback_error:
                final_error = f"Kh√¥ng th·ªÉ x·ª≠ l√Ω c√¢u h·ªèi: {str(fallback_error)}"
                print(f"{final_error}")
                return final_error

    def ask_multiple_followup(self, main_question: str, followup_questions: List[str]) -> Dict[str, str]:
        """H·ªèi m·ªôt c√¢u ch√≠nh v√† nhi·ªÅu c√¢u h·ªèi ph·ª•"""
        results = {}

        print(f"\nC√ÇU H·ªéI CH√çNH: {main_question}")
        results["main"] = self.ask(main_question)

        for i, followup in enumerate(followup_questions, 1):
            print(f"\nC√ÇU H·ªéI PH·ª§ {i}: {followup}")
            results[f"followup_{i}"] = self.ask(followup)

        return results

    def show_conversation_history(self):
        """Hi·ªÉn th·ªã l·ªãch s·ª≠ h·ªôi tho·∫°i"""
        if not self.conversation_history:
            print("Ch∆∞a c√≥ l·ªãch s·ª≠ h·ªôi tho·∫°i.")
            return

        print("\n L·ªäCH S·ª¨ H·ªòI THO·∫†I:")
        print("-" * 50)
        for entry in self.conversation_history:
            if entry["role"] == "user":
                print(f"Ng∆∞·ªùi d√πng: {entry['content']}")
            else:
                print(f"Agent: {entry['content'][:200]}...")  # hi·ªÉn th·ªã 200 k√Ω t·ª± ƒë·∫ßu
            print("-" * 30)

    def clear_memory(self):
        """X√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i"""
        self.conversation_history = []
        print("ƒê√£ x√≥a l·ªãch s·ª≠ h·ªôi tho·∫°i.")
